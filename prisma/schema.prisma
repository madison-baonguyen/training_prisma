generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  firstName String?
  lastName  String?
  social    Json?
  isAdmin   Boolean @default(false)

  // relations
  courses     CourseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testsGraded TestResult[]       @relation(name: "graded")
  tokens      Token[]
  feedback    CourseFeedback[]
}

model Token {
  id         Int       @id @default(autoincrement())
  createAt   DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique
  valid      Boolean   @default(true)
  expiration DateTime

  // relations
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Course {
  id            Int     @id @default(autoincrement())
  name          String
  courseDetails String?

  // relations
  members  CourseEnrollment[]
  tests    Test[]
  feedback CourseFeedback[]
}

model CourseFeedback {
  id       Int    @id @default(autoincrement())
  feedback String @db.Text

  // relations
  studentId Int
  courseId  Int
  student   User   @relation(fields: [studentId], references: [id])
  course    Course @relation(fields: [courseId], references: [id])
}

model Test {
  id       Int      @id @default(autoincrement())
  updateAt DateTime @updatedAt
  name     String
  date     DateTime

  // relations
  testResults TestResult[]
  courseId    Int
  course      Course       @relation(fields: [courseId], references: [id])
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int

  // relations
  testId   Int
  test     Test @relation(fields: [testId], references: [id]) // relation field
  studentId Int
  student  User @relation(name: "results", fields: [studentId], references: [id])
  graderId Int
  gradedBy User @relation(name: "graded", fields: [graderId], references: [id])
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // relations
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId])
  @@index([userId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}

enum TokenType {
  EMAIL
  API
}
